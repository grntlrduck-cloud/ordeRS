/*
 * OrdeRS BookStore Sample Service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NewBook {
    #[serde(rename = "title")]
    pub title: String,
    /// the date when this edition of the book was released
    #[serde(rename = "release")]
    pub release: String,
    /// the date when the first edition of the book was release
    #[serde(rename = "first_release", skip_serializing_if = "Option::is_none")]
    pub first_release: Option<String>,
    #[serde(rename = "authors")]
    pub authors: Vec<String>,
    #[serde(rename = "generes", skip_serializing_if = "Option::is_none")]
    pub generes: Option<Vec<String>>,
    #[serde(rename = "discount_codes", skip_serializing_if = "Option::is_none")]
    pub discount_codes: Option<Vec<String>>,
    #[serde(rename = "series", skip_serializing_if = "Option::is_none")]
    pub series: Option<String>,
    /// the edition of this book
    #[serde(rename = "edition", skip_serializing_if = "Option::is_none")]
    pub edition: Option<i32>,
    /// the price of this book in Dollar
    #[serde(rename = "price")]
    pub price: f64,
}

impl NewBook {
    pub fn new(title: String, release: String, authors: Vec<String>, price: f64) -> NewBook {
        NewBook {
            title,
            release,
            first_release: None,
            authors,
            generes: None,
            discount_codes: None,
            series: None,
            edition: None,
            price,
        }
    }
}

