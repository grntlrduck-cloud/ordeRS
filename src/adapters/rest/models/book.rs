/*
 * OrdeRS BookStore Sample Service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Book {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "title")]
    pub title: String,
    /// the date when this edition of the book was released
    #[serde(rename = "release")]
    pub release: String,
    /// the date when the first edition of the book was release
    #[serde(rename = "first_release")]
    pub first_release: String,
    #[serde(rename = "authors", skip_serializing_if = "Option::is_none")]
    pub authors: Option<Vec<models::Author>>,
    #[serde(rename = "generes", skip_serializing_if = "Option::is_none")]
    pub generes: Option<Box<models::Genre>>,
    #[serde(rename = "series", skip_serializing_if = "Option::is_none")]
    pub series: Option<String>,
    /// the edition of this book
    #[serde(rename = "edition")]
    pub edition: i32,
    /// the price of this book in Dollar
    #[serde(rename = "price")]
    pub price: f64,
    #[serde(rename = "discounts", skip_serializing_if = "Option::is_none")]
    pub discounts: Option<Vec<models::DiscountCode>>,
    /// The number of available items
    #[serde(rename = "available")]
    pub available: i32,
    /// the inventory state of the book
    #[serde(rename = "status")]
    pub status: Status,
}

impl Book {
    pub fn new(id: String, title: String, release: String, first_release: String, edition: i32, price: f64, available: i32, status: Status) -> Book {
        Book {
            id,
            title,
            release,
            first_release,
            authors: None,
            generes: None,
            series: None,
            edition,
            price,
            discounts: None,
            available,
            status,
        }
    }
}
/// the inventory state of the book
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "available")]
    Available,
    #[serde(rename = "re-ordered")]
    ReOrdered,
    #[serde(rename = "out-of-stock")]
    OutOfStock,
}

impl Default for Status {
    fn default() -> Status {
        Self::Available
    }
}

